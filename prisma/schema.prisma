generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Colors {
  id       Int        @id @default(autoincrement())
  name_uk  String
  name_en  String
  image    String     @default("white")
  Products Products[]
}

model Products {
  id             Int           @id @default(autoincrement())
  name_uk        String        @default("none")
  name_en        String        @default("none")
  description_uk String        @db.Text
  description_en String        @db.Text
  price          Float         @default(0)
  discount       Float         @default(0)
  isNew          Boolean       @default(false)
  isArchived     Boolean       @default(false)
  colorRef       Int
  categoryRef    Int
  size           Products_size @default(L)
  sex            Products_sex  @default(UNISEX)
  options        Json
  imageUrl       String?
  Categories     Categories    @relation(fields: [categoryRef], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "categoryFK")
  Colors         Colors        @relation(fields: [colorRef], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "colorFK")
  Stock          Stock[]

  @@index([colorRef], map: "colorFK_idx")
  @@index([name_uk, name_en], map: "indexNameUk")
  @@index([name_uk], map: "nameUk_idx")
  @@index([categoryRef], map: "categoryFK_idx")
}

model Users {
  id          Int        @id @default(autoincrement())
  name        String?
  email       String     @unique
  phone       String     @unique
  password    String
  countOrders Int        @default(0)
  countVisits Int        @default(0)
  role        Users_role @default(GUEST)
  address     Json
  Orders      Orders[]
}

model Categories {
  id             Int        @id @default(autoincrement())
  level          String?    @default("A") @db.VarChar(45)
  name_uk        String?
  description_uk String?    @db.Text
  name_en        String?
  description_en String?    @db.Text
  imageUrl       String?    @default("none")
  level_len      Int?
  Products       Products[]
}

model Orders {
  id         Int                @id @default(autoincrement())
  orderNo    String?            @db.VarChar(45)
  orderDate  DateTime?          @default(now()) @db.DateTime(0)
  stockRef   Int                @default(1)
  quantity   Int?
  operStatus Orders_operStatus? @default(STOCK)
  operDate   DateTime?          @db.DateTime(0)
  userRef    Int?
  Stock      Stock              @relation(fields: [stockRef], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "stockFK")
  Users      Users?             @relation(fields: [userRef], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "userFK")

  @@index([stockRef], map: "stockFK")
  @@index([userRef], map: "userFK")
}

model Stock {
  id           Int       @id @default(autoincrement())
  productRef   Int       @default(5)
  supplierRef  Int       @default(1)
  docName      String?   @default("Видаткова накладна") @db.VarChar(45)
  docNo        String?   @default("1") @db.VarChar(45)
  docDate      DateTime  @default(now()) @db.DateTime(0)
  countStock   Int       @default(0)
  docPrice     Float     @default(0) @db.Float
  docTotal     Float?    @db.Float
  countShop    Int?      @default(0)
  countOrdered Int?      @default(0)
  countSold    Int?      @default(0)
  lastUpdated  DateTime  @default(now()) @db.DateTime(0)
  Orders       Orders[]
  Products     Products  @relation(fields: [productRef], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fkProduct")
  Suppliers    Suppliers @relation(fields: [supplierRef], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fkSupplier")

  @@index([supplierRef], map: "fkSupplier_idx")
  @@index([productRef], map: "primaryNDX")
}

model Suppliers {
  id          Int                  @id @default(autoincrement())
  name        String?              @db.VarChar(45)
  address     String?              @db.VarChar(128)
  contact     String?              @db.VarChar(45)
  eMail       String?              @db.VarChar(45)
  phone       String?              @db.VarChar(45)
  messenger   Suppliers_messenger?
  messengerId String?              @db.VarChar(45)
  notes       String?              @db.Text
  Stock       Stock[]
}

enum Users_role {
  ADMIN
  CLIENT
  GUEST
  SELLER
}

enum Products_size {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}

enum Products_sex {
  MAN
  WOMAN
  UNISEX
}

enum Orders_operStatus {
  STOCK
  SHOP
  ORDERED
  SOLD
}

enum Suppliers_messenger {
  VIBER
  WHATSAPP
  TELEGRAM
  OTHER
}
